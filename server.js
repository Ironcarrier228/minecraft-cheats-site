// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
require('dotenv').config();

const express = require('express');
const path = require('path');
const { MongoClient } = require('mongodb');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 3000;
const uri = process.env.MONGODB_URI;

if (!uri) {
    console.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MONGODB_URI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
    process.exit(1);
}

const client = new MongoClient(uri, { useUnifiedTopology: true });
let usersCollection;

async function startServer() {
    try {
        await client.connect();
        const db = client.db('minecraft');
        usersCollection = db.collection('users');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // Middleware
        app.use(express.static(path.join(__dirname, 'public')));
        app.use(express.urlencoded({ extended: true }));

        // ===== –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
        const staticPages = ['/', '/register', '/login', '/cheats', '/about', '/viruses', '/clients', '/cfg'];
        staticPages.forEach(route => {
            const fileName = route === '/' ? 'index.html' : route.substring(1) + '.html';
            app.get(route, (req, res) => {
                res.sendFile(path.join(__dirname, 'public', fileName));
            });
        });

        // ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ =====
        app.post('/register', async (req, res) => {
            const { username, password } = req.body;
            if (!username || !password) return res.send('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');

            try {
                const existing = await usersCollection.findOne({ username });
                if (existing) return res.send('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

                await usersCollection.insertOne({ username, password });
                res.redirect('/login');
            } catch (err) {
                console.error(err);
                res.status(500).send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + err.message);
            }
        });

        // ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ =====
        app.post('/login', async (req, res) => {
            const { username, password } = req.body;
            try {
                const user = await usersCollection.findOne({ username, password });
                if (user) {
                    res.redirect('/cheats');
                } else {
                    res.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                }
            } catch (err) {
                console.error(err);
                res.status(500).send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: ' + err.message);
            }
        });

        // ===== –°–ø–∏—Å–æ–∫ CFG-—Ñ–∞–π–ª–æ–≤ =====
        app.get('/cfg-files', (req, res) => {
            const cfgDir = path.join(__dirname, 'public', 'cfg');
            fs.readdir(cfgDir, (err, files) => {
                if (err) {
                    return res.status(500).json({ error: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CFG-—Ñ–∞–π–ª–æ–≤' });
                }
                res.json(files);
            });
        });

        // ===== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ =====
        app.listen(port, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        process.exit(1);
    }
}

startServer();
