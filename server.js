require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

const express = require('express');
const path = require('path');
const { MongoClient } = require('mongodb');
const fs = require('fs');
const app = express();
const port = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const uri = process.env.MONGODB_URI;
if (!uri) {
    console.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è MONGODB_URI –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MongoDB
const client = new MongoClient(uri, { useUnifiedTopology: true });
let usersCollection;

async function startServer() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        await client.connect();
        const db = client.db('minecraft'); // –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        usersCollection = db.collection('users');
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');

        // Middleware
        app.use(express.static('public'));
        app.use(express.urlencoded({ extended: true }));

        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ª–æ–≥–∏–Ω)
        app.get('/', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'index.html'));
        });

        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        app.get('/register', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'register.html'));
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        app.post('/register', async (req, res) => {
            const { username, password } = req.body;
            if (!username || !password) {
                return res.send('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            }
            try {
                const existing = await usersCollection.findOne({ username });
                if (existing) {
                    return res.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                }
                await usersCollection.insertOne({ username, password });
                res.redirect('/');
            } catch (err) {
                console.error(err);
                res.send('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + err.message);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
        app.post('/login', async (req, res) => {
            const { username, password } = req.body;
            try {
                const user = await usersCollection.findOne({ username, password });
                if (user) {
                    res.redirect('/cheats');
                } else {
                    res.send('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                }
            } catch (err) {
                console.error(err);
                res.send('–û—à–∏–±–∫–∞: ' + err.message);
            }
        });

        // –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞
        app.get('/cheats', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'cheats.html'));
        });

        app.get('/about', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'about.html'));
        });

        app.get('/viruses', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'viruses.html'));
        });

        app.get('/clients', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'clients.html'));
        });

        app.get('/cfg', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'cfg.html'));
        });

        app.get('/cfg-files', (req, res) => {
            const cfgDir = path.join(__dirname, 'public', 'cfg');
            fs.readdir(cfgDir, (err, files) => {
                if (err) {
                    return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CFG-—Ñ–∞–π–ª—ã' });
                }
                res.json(files);
            });
        });

        // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        app.listen(port, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${port}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:+ —É —Ç–µ–±—è –ø–µ–Ω–∏—Å –≤ –∂–æ–ø–µ', error.message);
        process.exit(1);
    }
}

startServer();
